{"version":3,"sources":["Tasks.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Tasks","props","key","t","id","className","isDone","type","onChange","e","changeTaskStatus","todolistsID","currentTarget","checked","title","onClick","removeTask","Todolist","useState","setTitle","error","setError","addTask","trim","removeTodolist","value","onKeyPress","charCode","tasks","map","filter","changeFilter","App","todolistID1","v1","todolistID2","todolists","setTodolists","setTasks","currentTodolist","f","console","log","currnetTask","task","changeStatus","taskId","tasksFinded","find","m","tasksForTodolist","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.6ffafc3b.chunk.js","sourcesContent":["import React, {ChangeEvent} from 'react';\r\nimport {TaskType} from './Todolist';\r\n\r\ntype TasksPropsType = {\r\n    removeTask: (todolistsID:string,taskId: string) => void\r\n    changeTaskStatus: (todolistsID:string,taskId: string, isDone: boolean) => void\r\n    todolistsID:string\r\n    t: TaskType\r\n}\r\n\r\nexport const Tasks = (props: TasksPropsType) => {\r\n    const onClickHandler = () => props.removeTask(props.todolistsID,props.t.id)\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeTaskStatus(props.todolistsID,props.t.id, e.currentTarget.checked);\r\n    }\r\n    return(\r\n        <li key={props.t.id} className={props.t.isDone ? \"is-done\" : \"\"}>\r\n            <input type=\"checkbox\"\r\n                   onChange={onChangeHandler}\r\n                   checked={props.t.isDone}/>\r\n            <span>{props.t.title}</span>\r\n            <button onClick={onClickHandler}>x</button>\r\n        </li>\r\n    )\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {FilterValuesType} from './App';\r\nimport {Tasks} from './Tasks';\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\ntype PropsType = {\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (todolistsID:string,taskId: string) => void\r\n    changeFilter: (value: FilterValuesType,todolistsID:string) => void\r\n    addTask: (todolistsID:string,title: string) => void\r\n    changeTaskStatus: (todolistsID:string,taskId: string, isDone: boolean) => void\r\n    filter: FilterValuesType\r\n    todolistsID:string\r\n    removeTodolist:(todolistsID: string)=>void\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addTask = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addTask(props.todolistsID,title.trim());\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n        if (e.charCode === 13) {\r\n            addTask();\r\n        }\r\n    }\r\n\r\n    const onAllClickHandler = () => props.changeFilter(\"all\", props.todolistsID);\r\n    const onActiveClickHandler = () => props.changeFilter(\"active\",props.todolistsID);\r\n    const onCompletedClickHandler = () => props.changeFilter(\"completed\", props.todolistsID);\r\n\r\n    return <div>\r\n        <h3 >{props.title}\r\n        <button onClick={()=>props.removeTodolist(props.todolistsID)}>X</button>\r\n        </h3>\r\n        <div>\r\n            <input value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   className={error ? \"error\" : \"\"}\r\n            />\r\n            <button onClick={addTask}>+</button>\r\n            {error && <div className=\"error-message\">{error}</div>}\r\n        </div>\r\n        <ul>\r\n            {\r\n                props.tasks.map(t => {\r\n                    return(\r\n                        <Tasks t={t}\r\n                               changeTaskStatus={props.changeTaskStatus}\r\n                               removeTask={props.removeTask}\r\n                               todolistsID={props.todolistsID}/>\r\n                    )\r\n                })\r\n            }\r\n        </ul>\r\n{/*        const onClickHandler = () => props.removeTask(props.todolistsID,t.id)\r\n        const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeTaskStatus(props.todolistsID,t.id, e.currentTarget.checked);\r\n    }\r\n\r\n        return <li key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n            <input type=\"checkbox\"\r\n                   onChange={onChangeHandler}\r\n                   checked={t.isDone}/>\r\n            <span>{t.title}</span>\r\n            <button onClick={onClickHandler}>x</button>\r\n        </li>*/}\r\n        <div>\r\n            <button className={props.filter === 'all' ? \"active-filter\" : \"\"}\r\n                    onClick={onAllClickHandler}>All\r\n            </button>\r\n            <button className={props.filter === 'active' ? \"active-filter\" : \"\"}\r\n                    onClick={onActiveClickHandler}>Active\r\n            </button>\r\n            <button className={props.filter === 'completed' ? \"active-filter\" : \"\"}\r\n                    onClick={onCompletedClickHandler}>Completed\r\n            </button>\r\n        </div>\r\n    </div>\r\n}\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from './Todolist';\r\nimport {v1} from 'uuid';\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\ntype todolistsType = { id: string, title: string, filter: FilterValuesType }\r\n\r\ntype TasksType = { [key: string]: Array<{ id: string, title: string, isDone: boolean }> }\r\n\r\nfunction App() {\r\n\r\n    // let [tasks, setTasks] = useState([\r\n    //     {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n    //     {id: v1(), title: \"JS\", isDone: true},\r\n    //     {id: v1(), title: \"ReactJS\", isDone: false},\r\n    //     {id: v1(), title: \"Rest API\", isDone: false},\r\n    //     {id: v1(), title: \"GraphQL\", isDone: false},\r\n    // ]);\r\n    //\r\n    // let [todolists, setTodolists] = useState<Array<todolistsType>>([\r\n    //     {id: v1(), title: 'What to learn', filter: 'all'},\r\n    //     {id: v1(), title: 'What to buy', filter: 'all'},\r\n    // ])\r\n\r\n    let todolistID1 = v1();\r\n    let todolistID2 = v1();\r\n\r\n    let [todolists, setTodolists] = useState<Array<todolistsType>>([\r\n        {id: todolistID1, title: 'What to learn', filter: 'all'},\r\n        {id: todolistID2, title: 'What to buy', filter: 'all'},\r\n    ])\r\n\r\n    let [tasks, setTasks] = useState<TasksType>({\r\n        [todolistID1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n            {id: v1(), title: \"ReactJS\", isDone: false},\r\n            {id: v1(), title: \"Rest API\", isDone: false},\r\n            {id: v1(), title: \"GraphQL\", isDone: false},\r\n        ],\r\n        [todolistID2]: [\r\n            {id: v1(), title: \"HTML&CSS2\", isDone: true},\r\n            {id: v1(), title: \"JS2\", isDone: true},\r\n            {id: v1(), title: \"ReactJS2\", isDone: false},\r\n            {id: v1(), title: \"Rest API2\", isDone: false},\r\n            {id: v1(), title: \"GraphQL2\", isDone: false},\r\n        ]\r\n    });\r\n\r\n    const removeTodolist = (todolistsID: string) => {\r\n        let currentTodolist = todolists.filter(f => f.id !== todolistsID);\r\n        if (currentTodolist) {\r\n            setTodolists(currentTodolist)\r\n        }\r\n        console.log(todolistsID)\r\n    }\r\n\r\n    function removeTask(todolistsID: string, id: string) {\r\n        let currnetTask = tasks[todolistsID];\r\n        if (currnetTask) {\r\n            tasks[todolistsID] = currnetTask.filter(t => t.id != id);\r\n        }\r\n        setTasks({...tasks})\r\n\r\n        // let filteredTasks = tasks.filter(t => t.id != id);\r\n        // setTasks(filteredTasks);\r\n    }\r\n\r\n    function addTask(todolistsID: string, title: string) {\r\n        let currnetTask = tasks[todolistsID];\r\n        let task = {id: v1(), title: title, isDone: false};\r\n        tasks[todolistsID] = [...currnetTask, task]\r\n        setTasks({...tasks})\r\n\r\n        // let task = {id: v1(), title: title, isDone: false};\r\n        // let newTasks = [task, ...tasks];\r\n        // setTasks(newTasks);\r\n    }\r\n\r\n    function changeStatus(todolistsID: string, taskId: string, isDone: boolean) {\r\n        let currnetTask = tasks[todolistsID];\r\n        let tasksFinded = currnetTask.find(f => f.id === taskId)\r\n        if (tasksFinded) {\r\n            tasksFinded.isDone = isDone;\r\n            setTasks({...tasks});\r\n        }\r\n        // let task = tasks.find(t => t.id === taskId);\r\n        // if (task) {\r\n        //     task.isDone = isDone;\r\n        // }\r\n        //\r\n        // setTasks([...tasks]);\r\n    }\r\n\r\n    // let [filter, setFilter] = useState<FilterValuesType>(\"all\");\r\n    // let tasksForTodolist = tasks;\r\n    // if (filter === \"active\") {\r\n    //     tasksForTodolist = tasks.filter(t => t.isDone === false);\r\n    // }\r\n    // if (filter === \"completed\") {\r\n    //     tasksForTodolist = tasks.filter(t => t.isDone === true);\r\n    // }\r\n\r\n    function changeFilter(value: FilterValuesType, todolistsID: string) {\r\n        let currentTodolist = todolists.find(f => f.id === todolistsID);\r\n        if (currentTodolist) {\r\n            currentTodolist.filter = value;\r\n            setTodolists([...todolists])\r\n        }\r\n        console.log(todolists)\r\n        // setFilter(value);\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            {todolists.map((m) => {\r\n                let tasksForTodolist = tasks[m.id];\r\n                if (m.filter === \"active\") {\r\n                    tasksForTodolist = tasks[m.id].filter(t => t.isDone === false);\r\n                }\r\n                if (m.filter === \"completed\") {\r\n                    tasksForTodolist = tasks[m.id].filter(t => t.isDone === true);\r\n                }\r\n                return (\r\n                    <Todolist\r\n                        key={m.id}\r\n                        title={m.title}\r\n                        todolistsID={m.id}\r\n                        tasks={tasksForTodolist}\r\n                        removeTask={removeTask}\r\n                        changeFilter={changeFilter}\r\n                        addTask={addTask}\r\n                        changeTaskStatus={changeStatus}\r\n                        filter={m.filter}\r\n                        removeTodolist={removeTodolist}\r\n                    />\r\n                )\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}